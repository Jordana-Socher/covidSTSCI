# Normalize data and split into training test
attach(masterData)
View(masterData)
View(masterData)
masterData = masterData[order(masterData$gdp_per_capita),]
masterData[is.na(masterData)] = 0
View(masterData)
training =sample(1:nrow(masterData),nrow(masterData)/2, replace = FALSE)
train = masterData[training,]
test = masterData[-training,]
testing = test$gdp_per_capita
View(test)
View(train)
View(masterData)
rm(list = ls())
source("dataBuild.R")
load("covidCorruption.RData")
# Normalize data and split into training test
attach(masterData)
masterData = masterData[order(masterData$gdp_per_capita),]
masterData[is.na(masterData)] = 0
training =sample(1:nrow(masterData),nrow(masterData)/2, replace = FALSE)
train = masterData[training,]
test = masterData[-training,]
testing = test$gdp_per_capita
testing
training
train
test
testing = test$gdp_per_capita
testing
train2 = cbind(total_cases, total_deaths, population, stringency_index, human_development_index)[training, ]
View(train)
View(train2)
train2[is.na(train2)] = 0
masterData
test2 = cbind(total_cases, total_deaths, population, stringency_index, human_development_index)[-training, ]
test2[is.na(test2)] = 0
class = transpose(as.data.frame(subset(train, select = c(gdp_per_capita))))
accum = c()
for (numC in c(1, 2, 3, 5, 10, 20)){
knn_pred = knn(train2, test2, class, k = numC)
error = mean(knn_pred != testing)
accum = append(accum, error)
print(error)
}
plot(accum)
rm(list = ls())
source("dataBuild.R")
load("covidCorruption.RData")
# Normalize data and split into training test
attach(masterData)
masterData = masterData[order(masterData$gdp_per_capita),]
masterData[is.na(masterData)] = 0
med = median(gdp_per_capita)
gdp50 <- ifelse(gdp_per_capita > med, yes = 1, no = 0)
training =sample(1:nrow(masterData),nrow(masterData)/2, replace = FALSE)
train = masterData[training,]
test = masterData[-training,]
testing = test$gdp50
# How do these regressors predict how corrupt a country is? How does this compare to model excluding
# covid numbers etc. Do we need some model selection technique? Grid search?
#lda = lda(gdp_per_capita ~ total_cases + total_deaths + population + stringency_index + human_development_index, data=masterData, subset = training)
#lda = lda(gdp_per_capita ~  total_cases + total_deaths + population + stringency_index + human_development_index, data=masterData, subset = training)
#lda_pred = predict(lda, test)
#error = mean(lda_pred$class != testing)
#error
#kNN
train2 = cbind(total_cases, total_deaths, population, stringency_index, human_development_index)[training, ]
train2[is.na(train2)] = 0
test2 = cbind(total_cases, total_deaths, population, stringency_index, human_development_index)[-training, ]
test2[is.na(test2)] = 0
class = transpose(as.data.frame(subset(train, select = c(gdp50))))
accum = c()
for (numC in c(1, 2, 3, 5, 10, 20)){
knn_pred = knn(train2, test2, class, k = numC)
error = mean(knn_pred != testing)
accum = append(accum, error)
print(error)
}
plot(accum)
rm(list = ls())
source("dataBuild.R")
load("covidCorruption.RData")
attach(masterData)
masterData = masterData[order(masterData$gdp_per_capita),]
masterData[is.na(masterData)] = 0
med = median(gdp_per_capita)
gdp50 <- ifelse(gdp_per_capita > med, yes = 1, no = 0)
training =sample(1:nrow(masterData),nrow(masterData)/2, replace = FALSE)
train = masterData[training,]
test = masterData[-training,]
testing = test$gdp50
train2 = cbind(total_cases, total_deaths, population, stringency_index, human_development_index)[training, ]
train2[is.na(train2)] = 0
test2 = cbind(total_cases, total_deaths, population, stringency_index, human_development_index)[-training, ]
test2[is.na(test2)] = 0
class = transpose(as.data.frame(subset(train, select = c(gdp50))))
accum = c()
for (numC in c(1, 2, 3, 5, 10, 20)){
knn_pred = knn(train2, test2, class, k = numC)
error = mean(knn_pred != testing)
accum = append(accum, error)
print(error)
}
med
med = median(gdp_per_capita)
med
med = median(masterData$gdp_per_capita)
med
rm(list = ls())
source("dataBuild.R")
load("covidCorruption.RData")
# Normalize data and split into training test
attach(masterData)
masterData = masterData[order(masterData$gdp_per_capita),]
masterData[is.na(masterData)] = 0
med = median(masterData$gdp_per_capita)
gdp50 <- ifelse(gdp_per_capita > med, yes = 1, no = 0)
training =sample(1:nrow(masterData),nrow(masterData)/2, replace = FALSE)
train = masterData[training,]
test = masterData[-training,]
testing = test$gdp50
# How do these regressors predict how corrupt a country is? How does this compare to model excluding
# covid numbers etc. Do we need some model selection technique? Grid search?
#lda = lda(gdp_per_capita ~ total_cases + total_deaths + population + stringency_index + human_development_index, data=masterData, subset = training)
#lda = lda(gdp_per_capita ~  total_cases + total_deaths + population + stringency_index + human_development_index, data=masterData, subset = training)
#lda_pred = predict(lda, test)
#error = mean(lda_pred$class != testing)
#error
#kNN
train2 = cbind(total_cases, total_deaths, population, stringency_index, human_development_index)[training, ]
train2[is.na(train2)] = 0
test2 = cbind(total_cases, total_deaths, population, stringency_index, human_development_index)[-training, ]
test2[is.na(test2)] = 0
class = transpose(as.data.frame(subset(train, select = c(gdp50))))
accum = c()
for (numC in c(1, 2, 3, 5, 10, 20)){
knn_pred = knn(train2, test2, class, k = numC)
error = mean(knn_pred != testing)
accum = append(accum, error)
print(error)
}
plot(accum)
accum = c()
for (numC in c(1, 2, 3, 5, 10, 20)){
knn_pred = knn(train2, test2, class, k = numC)
error = mean(knn_pred != testing)
accum = append(accum, error)
print(error)
}
train2
test2
clas
clas
class
rm(list = ls())
source("dataBuild.R")
load("covidCorruption.RData")
# Normalize data and split into training test
attach(masterData)
masterData = masterData[order(masterData$gdp_per_capita),]
masterData[is.na(masterData)] = 0
med = median(masterData$gdp_per_capita)
medGDP <- ifelse(gdp_per_capita > med, yes = 1, no = 0)
training =sample(1:nrow(masterData),nrow(masterData)/2, replace = FALSE)
train = masterData[training,]
test = masterData[-training,]
testing = test$medGDP
# How do these regressors predict how corrupt a country is? How does this compare to model excluding
# covid numbers etc. Do we need some model selection technique? Grid search?
#lda = lda(gdp_per_capita ~ total_cases + total_deaths + population + stringency_index + human_development_index, data=masterData, subset = training)
#lda = lda(gdp_per_capita ~  total_cases + total_deaths + population + stringency_index + human_development_index, data=masterData, subset = training)
#lda_pred = predict(lda, test)
#error = mean(lda_pred$class != testing)
#error
#kNN
train2 = cbind(total_cases, total_deaths, population, stringency_index, human_development_index)[training, ]
train2[is.na(train2)] = 0
test2 = cbind(total_cases, total_deaths, population, stringency_index, human_development_index)[-training, ]
test2[is.na(test2)] = 0
class = transpose(as.data.frame(subset(train, select = c(medGDP))))
accum = c()
for (numC in c(1, 2, 3, 5, 10, 20)){
knn_pred = knn(train2, test2, class, k = numC)
error = mean(knn_pred != testing)
accum = append(accum, error)
print(error)
}
plot(accum)
accum = c()
for (numC in c(1, 2, 3, 5, 10, 20)){
knn_pred = knn(train2, test2, class, k = numC)
error = mean(knn_pred != testing)
accum = append(accum, error)
print(error)
}
class = transpose(as.data.frame(subset(train, select = c(medGDP))))
medGDP
medGDP <- ifelse(gdp_per_capita >= med, yes = 1, no = 0)
medGDP
View(masterData)
masterData$medGDP = medGDP
View(masterData)
rm(list = ls())
source("dataBuild.R")
load("covidCorruption.RData")
# Normalize data and split into training test
masterData = masterData[order(masterData$gdp_per_capita),]
masterData[is.na(masterData)] = 0
med = median(masterData$gdp_per_capita)
medGDP <- ifelse(gdp_per_capita >= med, yes = 1, no = 0)
masterData$medGDP = medGDP
View(masterData)
medGDP <- ifelse(gdp_per_capita >= med, yes = 1, no = 0)
medGDP <- ifelse(masterData$gdp_per_capita >= med, yes = 1, no = 0)
medGDP
rm(list = ls())
source("dataBuild.R")
load("covidCorruption.RData")
# Normalize data and split into training test
attach(masterData)
masterData = masterData[order(masterData$gdp_per_capita),]
masterData[is.na(masterData)] = 0
med = median(masterData$gdp_per_capita)
medGDP <- ifelse(masterData$gdp_per_capita >= med, yes = 1, no = 0)
masterData$medGDP = medGDP
training =sample(1:nrow(masterData),nrow(masterData)/2, replace = FALSE)
train = masterData[training,]
test = masterData[-training,]
testing = test$medGDP
# How do these regressors predict how corrupt a country is? How does this compare to model excluding
# covid numbers etc. Do we need some model selection technique? Grid search?
#lda = lda(gdp_per_capita ~ total_cases + total_deaths + population + stringency_index + human_development_index, data=masterData, subset = training)
#lda = lda(gdp_per_capita ~  total_cases + total_deaths + population + stringency_index + human_development_index, data=masterData, subset = training)
#lda_pred = predict(lda, test)
#error = mean(lda_pred$class != testing)
#error
#kNN
train2 = cbind(total_cases, total_deaths, population, stringency_index, human_development_index)[training, ]
train2[is.na(train2)] = 0
test2 = cbind(total_cases, total_deaths, population, stringency_index, human_development_index)[-training, ]
test2[is.na(test2)] = 0
class = transpose(as.data.frame(subset(train, select = c(medGDP))))
accum = c()
for (numC in c(1, 2, 3, 5, 10, 20)){
knn_pred = knn(train2, test2, class, k = numC)
error = mean(knn_pred != testing)
accum = append(accum, error)
print(error)
}
plot(accum)
rm(list = ls())
source("dataBuild.R")
load("covidCorruption.RData")
# Normalize data and split into training test
attach(masterData)
masterData = masterData[order(masterData$gdp_per_capita),]
masterData[is.na(masterData)] = 0
med = median(masterData$gdp_per_capita)
medGDP <- ifelse(masterData$gdp_per_capita >= med, yes = 1, no = 0)
masterData$medGDP = medGDP
training =sample(1:nrow(masterData),nrow(masterData)/2, replace = FALSE)
train = masterData[training,]
test = masterData[-training,]
testing = test$medGDP
# How do these regressors predict how corrupt a country is? How does this compare to model excluding
# covid numbers etc. Do we need some model selection technique? Grid search?
#lda = lda(gdp_per_capita ~ total_cases + total_deaths + population + stringency_index + human_development_index, data=masterData, subset = training)
#lda = lda(gdp_per_capita ~  total_cases + total_deaths + population + stringency_index + human_development_index, data=masterData, subset = training)
#lda_pred = predict(lda, test)
#error = mean(lda_pred$class != testing)
#error
#kNN
train2 = cbind(population, stringency_index, human_development_index)[training, ]
train2[is.na(train2)] = 0
test2 = cbind(population, stringency_index, human_development_index)[-training, ]
test2[is.na(test2)] = 0
class = transpose(as.data.frame(subset(train, select = c(medGDP))))
accum = c()
for (numC in c(1, 2, 3, 5, 10, 20)){
knn_pred = knn(train2, test2, class, k = numC)
error = mean(knn_pred != testing)
accum = append(accum, error)
print(error)
}
plot(accum)
medGDP
View(masterData)
rm(list = ls())
source("dataBuild.R")
load("covidCorruption.RData")
# Normalize data and split into training test
attach(masterData)
masterData = masterData[order(masterData$gdp_per_capita),]
masterData = na.omit(masterData)
med = median(masterData$gdp_per_capita)
medGDP <- ifelse(masterData$gdp_per_capita >= med, yes = 1, no = 0)
masterData$medGDP = medGDP
training =sample(1:nrow(masterData),nrow(masterData)/2, replace = FALSE)
train = masterData[training,]
test = masterData[-training,]
testing = test$medGDP
# How do these regressors predict how corrupt a country is? How does this compare to model excluding
# covid numbers etc. Do we need some model selection technique? Grid search?
#lda = lda(gdp_per_capita ~ total_cases + total_deaths + population + stringency_index + human_development_index, data=masterData, subset = training)
#lda = lda(gdp_per_capita ~  total_cases + total_deaths + population + stringency_index + human_development_index, data=masterData, subset = training)
#lda_pred = predict(lda, test)
#error = mean(lda_pred$class != testing)
#error
#kNN
train2 = cbind(population, stringency_index, human_development_index)[training, ]
train2[is.na(train2)] = 0
test2 = cbind(population, stringency_index, human_development_index)[-training, ]
test2[is.na(test2)] = 0
class = transpose(as.data.frame(subset(train, select = c(medGDP))))
accum = c()
for (numC in c(1, 2, 3, 5, 10, 20)){
knn_pred = knn(train2, test2, class, k = numC)
error = mean(knn_pred != testing)
accum = append(accum, error)
print(error)
}
plot(accum)
rm(list = ls())
source("dataBuild.R")
load("covidCorruption.RData")
# Normalize data and split into training test
attach(masterData)
masterData = masterData[order(masterData$gdp_per_capita),]
masterData = na.omit(masterData)
View(masterData)
rm(list = ls())
source("dataBuild.R")
load("covidCorruption.RData")
# Normalize data and split into training test
attach(masterData)
masterData = masterData[order(masterData$gdp_per_capita),]
masterData = na.omit(masterData$gdp_per_capita)
masterData
masterData = na.omit(masterDat)
masterData = na.omit(masterData)
rm(list = ls())
source("dataBuild.R")
load("covidCorruption.RData")
# Normalize data and split into training test
attach(masterData)
masterData = masterData[order(masterData$gdp_per_capita),]
masterData = na.omit(masterData)
View(masterData)
rm(list = ls())
source("dataBuild.R")
load("covidCorruption.RData")
# Normalize data and split into training test
attach(masterData)
masterData = masterData[order(masterData$gdp_per_capita),]
masterData =  DropNA(masterData, Var = c("gdp_per_capita"))
masterData =  drop_na(masterData, Var = c("gdp_per_capita"))
masterData =  drop_na(gdp_per_capita)
masterData =  drop_na(c("gdp_per_capita"))
View(masterData)
rm(list = ls())
source("dataBuild.R")
load("covidCorruption.RData")
# Normalize data and split into training test
attach(masterData)
masterData = masterData[order(masterData$gdp_per_capita),]
masterData =  drop_na(c("gdp_per_capita"))
med = median(masterData$gdp_per_capita)
medGDP <- ifelse(masterData$gdp_per_capita >= med, yes = 1, no = 0)
masterData$medGDP = medGDP
training =sample(1:nrow(masterData),nrow(masterData)/2, replace = FALSE)
train = masterData[training,]
test = masterData[-training,]
testing = test$medGDP
# How do these regressors predict how corrupt a country is? How does this compare to model excluding
# covid numbers etc. Do we need some model selection technique? Grid search?
#lda = lda(gdp_per_capita ~ total_cases + total_deaths + population + stringency_index + human_development_index, data=masterData, subset = training)
#lda = lda(gdp_per_capita ~  total_cases + total_deaths + population + stringency_index + human_development_index, data=masterData, subset = training)
#lda_pred = predict(lda, test)
#error = mean(lda_pred$class != testing)
#error
#kNN
train2 = cbind(population, stringency_index, human_development_index)[training, ]
train2[is.na(train2)] = 0
test2 = cbind(population, stringency_index, human_development_index)[-training, ]
test2[is.na(test2)] = 0
class = transpose(as.data.frame(subset(train, select = c(medGDP))))
accum = c()
for (numC in c(1, 2, 3, 5, 10, 20)){
knn_pred = knn(train2, test2, class, k = numC)
error = mean(knn_pred != testing)
accum = append(accum, error)
print(error)
}
plot(accum)
source("dataBuild.R")
load("covidCorruption.RData")
library("readxl")
library(dplyr)
library(tidyr)
library("ggplot2")
theme_set(theme_bw())
library("sf")
library("rnaturalearth")
library("rnaturalearthdata")
library(rgeos)
#bringing in covid data alone to get the specific max case rate per country
covid<-read_excel("COVID.xlsx")
covid<-covid%>%drop_na(total_cases, population, gdp_per_capita)
covid$caseRatePer100k = covid$total_cases/(covid$population/100000)
covid_max_rate_df<-covid%>%group_by(location)%>%summarise(max(caseRatePer100k))
#using ne_countries to get map of countries
world <- ne_countries(scale = "medium", returnclass = "sf")
#merging world df with covid_max_rate_df to plot and renaming column
world_1=merge(world, covid_max_rate_df, by.x="name", by.y="location")
names(world_1)[names(world_1) == "max(caseRatePer100k)"] <- "max_case_rate"
#merging world with masterData df to plot corruption and gdp
masterData<-masterData%>%drop_na(gdp2020)
percent_change_gdp=masterData%>%group_by(Country.or.Area)%>%summarise((gdp2020-gdp2019)/gdp2020)
percent_change_gdp=unique(percent_change_gdp)
names(percent_change_gdp)[names(percent_change_gdp) == "(gdp2020 - gdp2019)/gdp2020"] <- "percent_change_gdp"
percent_change_gdp$percent_change_gdp=abs(percent_change_gdp$percent_change_gdp)
world_2=merge(world, percent_change_gdp, by.x="name", by.y="Country.or.Area")
world_3=merge(world, masterData, by.x="name", by.y="Country.or.Area")
world_3=unique(world_3)
View(world_3)
lawrank=masterData %>%
select(Country.or.Area, lawRank)
lawrank=unique(lawrank)
world_3=merge(world, lawrank, by.x="name", by.y="Country.or.Area")
ggplot(data = world_3) +
geom_sf(aes(fill = lawRank)) +
scale_fill_viridis_c(option = "plasma", trans = "sqrt")
#original plots
plot1 = ggplot(data =masterData, aes(x = lawRank, y = accountRank)) + geom_text(aes(label = location), size = 2) + geom_smooth(method = "lm")
source("dataBuild.R")
load("covidCorruption.RData")
library("readxl")
library(dplyr)
library(tidyr)
library("ggplot2")
theme_set(theme_bw())
library("sf")
library("rnaturalearth")
library("rnaturalearthdata")
library(rgeos)
#original plots
plot1 = ggplot(data =masterData, aes(x = lawRank, y = accountRank)) + geom_text(aes(label = location), size = 2) + geom_smooth(method = "lm")
plot1
#original plots
plot1 = ggplot(data =masterData, aes(x = lawRank, y = gdp_per_capita)) + geom_text(aes(label = location), size = 2) + geom_smooth(method = "lm")
plot1
#original plots
plot1 = ggplot(data =masterData, aes(x = lawRank, y = gdp_per_capita)) + geom_text(aes(label = Country.or.Area), size = 2) + geom_smooth(method = "lm")
plot1
#original plots
plot1 = ggplot(data =masterData, aes(x = lawRank, y = accountRank)) + geom_text(aes(label = Country.or.Area), size = 2) + geom_smooth(method = "lm")
#original plots
plot1 = ggplot(data =masterData, aes(x = lawRank, y = accountRank)) + geom_text(aes(label = Country.or.Area), size = 2) + geom_smooth(method = "lm")
plot1
#original plots
plot1 = ggplot(data =masterData, aes(x = lawRank, y = gdp_per_capita)) + geom_text(aes(label = Country.or.Area), size = 2) + geom_smooth(method = "lm")
plot1
source("dataBuild.R")
load("covidCorruption.RData")
library("readxl")
library(dplyr)
library(tidyr)
library("ggplot2")
theme_set(theme_bw())
library("sf")
library("rnaturalearth")
library("rnaturalearthdata")
library(rgeos)
#bringing in covid data alone to get the specific max case rate per country
covid<-read_excel("COVID.xlsx")
#original plots
plot1 = ggplot(data =masterData, aes(x = lawRank, y = gdp_per_capita)) + geom_text(aes(label = location), size = 2) + geom_smooth(method = "lm")
plot1
#original plots
plot1 = ggplot(data =masterData, aes(x = lawRank, y = gdp_per_capita)) + geom_text(aes(label = Country.or.Area), size = 2) + geom_smooth(method = "lm")
plot1
plot2 = ggplot(data =masterData, aes(x = accountRank, y = gdp_per_capita)) + geom_text(aes(label = Country.or.Area), size = 2) + geom_smooth(method = "lm")
plot2
plot1 = ggplot(data =masterData, aes(x = lawRank, y = gdp_per_capita)) + geom_text(aes(label = Country.or.Area), size = 2) + geom_smooth(method = "lm")
plot2 = ggplot(data =masterData, aes(x = accountRank, y = gdp_per_capita)) + geom_text(aes(label = Country.or.Area), size = 2) + geom_smooth(method = "lm")
plot3 = ggplot(data =masterData, aes(x = stabilityRank, y = gdp_per_capita)) + geom_text(aes(label = Country.or.Area), size = 2) + geom_smooth(method = "lm")
plot4 = ggplot(data =masterData, aes(x = total_deaths, y = gdp_per_capita)) + geom_text(aes(label = Country.or.Area), size = 2) + geom_smooth(method = "lm")
plot5 = ggplot(data =masterData, aes(x = regulationRank, y = gdp_per_capita)) + geom_text(aes(label = Country.or.Area), size = 2) + geom_smooth(method = "lm")
plot6 = ggplot(data =masterData, aes(x = govRank, y = gdp_per_capita)) + geom_text(aes(label = Country.or.Area), size = 2) + geom_smooth(method = "lm")
plot7 = ggplot(data =masterData, aes(x = corruptionRank, y = gdp_per_capita)) + geom_text(aes(label = Country.or.Area), size = 2) + geom_smooth(method = "lm")
plot8 = ggplot(data =masterData, aes(x = total_cases, y = gdp_per_capita)) + geom_text(aes(label = Country.or.Area), size = 2) + geom_smooth(method = "lm")
plot3
#original plots
plot1 = ggplot(data =masterData, aes(x = lawRank, y = gdp_per_capita))  + geom_smooth(method = "lm")
plot1
#original plots
plot1 = ggplot(data =masterData, aes(x = lawRank, y = gdp_per_capita)) + geom_text(aes(label = Country.or.Area), size = 2) + geom_smooth(method = "lm")
plot4
plot4 = ggplot(data =masterData, aes(x = total_deaths, y = gdp_per_capita))  + geom_smooth(method = "lm")
plot4
plot5 = ggplot(data =masterData, aes(x = regulationRank, y = gdp_per_capita)) + geom_text(aes(label = Country.or.Area), size = 2) + geom_smooth(method = "lm")
plot5
plot6 = ggplot(data =masterData, aes(x = govRank, y = gdp_per_capita)) + geom_text(aes(label = Country.or.Area), size = 2) + geom_smooth(method = "lm")
plot6
plot7 = ggplot(data =masterData, aes(x = corruptionRank, y = gdp_per_capita)) + geom_text(aes(label = Country.or.Area), size = 2) + geom_smooth(method = "lm")
plot7
plot8 = ggplot(data =masterData, aes(x = total_cases, y = gdp_per_capita)) + geom_text(aes(label = Country.or.Area), size = 2) + geom_smooth(method = "lm")
plot8
plot8 = ggplot(data =masterData, aes(x = total_cases, y = gdp_per_capita)) + geom_smooth(method = "lm")
plot8
